<?xml version="1.0" encoding="utf-8"?>
<html>
<head>
  <style type="text/css">
    @media print {
      body { }
      p.img { text-align: center; page-break-inside: avoid }
      img.CC { display: inline }
    }
    @media screen {
      body { max-width: 800px; margin: auto }
      p.img { text-align: center }
      img.CC { display: inline }
    }
    p.date {
      font-size: smaller;
      margin: 0;
    }
    p.versionHistory {
      color: gray
    }
    p.versionHistory a {
      color: gray
    }
    p.ref {
      text-indent: -2em;
      padding-left: 2em;
    }
  </style>

  <!-- PDFjs code (more at the end of the document) -->
  <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>

</head>
<body>
  <h1>Building an mplib Shared Library</h1>
  <p>
    <span style="font-style: italic">by Paul Murrell</span>
    <a href="http://orcid.org"><img alt="" src="https://www.stat.auckland.ac.nz/~paul/ORCID/ORCiD.png" style="width: 16px; height: 16px; vertical-align: middle" /></a> <span style="font-family: mono; font-size: small"><a href="http://orcid.org/0000-0002-3224-8858">http://orcid.org/0000-0002-3224-8858</a></span>
  </p>
  <p class="date">
    Version 1:
    <rcode echo="FALSE" results="asis">
cat(format(Sys.Date(), "%A %d %B %Y"))
    </rcode>
  </p>

  <rcode id="init" echo="FALSE" message="FALSE" results="hide">
opts_chunk$set(comment=" ", tidy=FALSE)
options(width=100)
## For wonky desktop set up
options(bitmapType="cairo")
  </rcode>
  <rcode echo="FALSE">
    library(grid)
  </rcode>

  <hr/>
  <p>
    <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/"><img class="CC"
    alt="Creative Commons License" style="border-width:0"
    src="https://i.creativecommons.org/l/by/4.0/88x31.png"/></a><br/><span
    xmlns:dct="http://purl.org/dc/terms/"
    property="dct:title">This document</span>
    by <span xmlns:cc="http://creativecommons.org/ns#"
    property="cc:attributionName">Paul
    Murrell</span> is licensed under a <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/">Creative
    Commons Attribution 4.0 International License</a>.
  </p>
  <hr/>
  <p>
    This report records the
    steps that were used to build a shared library for
    the MetaPost graphics system.
  </p>

  <toc/>

  <h2><a name="intro">Introduction</a></h2>
  <p>
    <a href="http://www.tug.org/metapost.html">MetaPost</a>
    (<a href="#metapost-hobby"/>) 
    is a graphics language that provides some very useful 
    features for describing curves.  For example, the 
    following MetaPost code describes an infinity symbol 
    from a MetaPost "path" that consists of 
    only four points (plus constraints that dictate the
    direction that the curve should take at each of the points).
    This code is saved in a file called <code>infinity.mp</code>.
  </p>
  <rcode echo="FALSE">
mpostcmd <- "mpost infinity.mp"
system(mpostcmd)
cat(readLines("infinity.mp"), sep="\n")
  </rcode>
  <p>
    The MetaPost description of a path
    is processed by a MetaPost compiler, <code>mpost</code>, which calculates
    a set of 
    <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">cubic Bezier curves</a> that draw the final curve.  
    The command below processes MetaPost
    code in the file <code>infinity.mp</code> and produces
    a file <code>infinity.log</code>.
  </p>
  <rcode echo="FALSE">
cmd <- "mpost -s tracingchoices=1 infinity.mp"
result <- system(cmd, intern=TRUE)
cat(cmd)
log <- readLines("infinity.log")
  </rcode>
  <p>
    The file <code>infinity.log</code> shows the Bezier control points
    that <code>mpost</code> has calculated (starting from the line
    "<!--rinline log[grep("after choices", log)]-->").
  </p>
  <a name="solvedpath"/>
  <rcode echo="FALSE">  
cat(log, sep="\n")
  </rcode>
  <p>
    The MetaPost compiler also produces 
    PostScript, PNG, or SVG output to render the Bezier curves.  
    The file <code>infinity.mp</code> produces the SVG
    file <code>infinity.svg</code>,
    which is shown below.
  </p>
  <img src="infinity.svg"/>
  <p>
    The MetaPost compiler is built on
    a MetaPost compiler library called <code>mplib</code> 
    (<a href="#metapost"/> p. 3), which means that
    other programs can include the MetaPost compiler.  For example, 
    there is a Lua (<a href="#Ierusalimschy:1996:LEE:229593.229595"/>) 
    binding for the <code>mplib</code> library
    that allows
    MetaPost code to be embedded directly within a LuaTeX document 
    (<a href="#luatex"/>).
    The <a href="https://www.contextgarden.net/">ConTeXt document 
    processing system</a> also builds on this Lua <code>mplib</code> 
    binding to allow embedding of MetaPost code within ConTeXt documents.
  </p>
  <!-- ConTeXt builds on LuaTeX, which has MetaPost built in
       (p2 of http://www.pragma-ade.com/general/manuals/metafun-p.pdf) -->
  <!-- Lua mplib builds on mplib.c from MetaPost distro
       (https://github.com/simoncozens/sile/issues/503)
       TeXLive/source/texk/web2c/mplibdir/lmplib.c includes mplib.h etc -->
  <p>
    The <code>mplib</code> library provides C functions that allow us
    to define MetaPost paths, and solve them, in C code.
    For example, the C code below, which is saved in a file called
    <code>infinity.c</code>, uses the <code>mplib</code> API to
    describe and solve the infinity symbol that we described with MetaPost
    code in the file <code>infinity.mp</code>.  
  </p>
  <p>
    The main action occurs in the <code>main</code> function;
    the <code>mp_dump_solved_path</code> function is just there to
    print out the answer (the code is based on an example in 
    <a href="#mplibapi"/>).  There are calls to the function
    <code>mp_append_knot</code> to create points on a path,
    calls to <code>mp_set_knot_direction</code> to define directions
    at each point, and a call to <code>mp_solve_path</code>
    that calculates Bezier curves to draw the final curve.
  </p>
  <a name="inf.c"/>
  <rcode echo="FALSE">
cat(readLines("infinity.c"),
    sep="\n")
  </rcode>
  <p>
    Although there are several mentions in TUGboat articles 
    of developing the <code>mplib</code>
    library as a system library that can be used by any application program
    (<a href="#Hoekwater:TB27-1-18"/>, 
    <a href="#Hoekwater:TB28-3-317"/>,
    <a href="#Hoekwater:TB29-3-380"/>), and there is 
    an "MPLib API Manual" (<a href="#mplibapi"/>), only the
    <code>mpost</code> standalone program is included as
    part of large TeX distributions such as 
    <a href="https://www.tug.org/texlive/">TeX Live</a> and
    <a href="https://miktex.org/">MikTeX</a>.  
    Furthermore, there are no "development" distributions
    of these packages that include header files, let alone 
    pre-built libraries for <code>mplib</code>.
    Both LuaTeX and ConTeXt are part of these large distributions,
    so have access to <code>mplib</code> when they are built.
  </p>
  <p>
    This means that, if we want to create a new program,
    like the file <code>infinity.c</code>, that links to
    the <code>mplib</code> library, we must start with a copy
    of the MetaPost source code and do a bit more of the work 
    ourselves.
  </p>
  <!-- <a href="http://tug.org/pipermail/metapost/2010-April/001917.html">email
    thread on metapost@tug.org</a> -->
  <p>
    This report describes a series of
    steps for making use of the <code>mplib</code>
    library within a new C program, with demonstrations of building both 
    static and dynamic <code>mplib</code> libraries.
  </p>
  <p>
    This report will focus solely on solutions with TeX Live in
    an Ubuntu Linux
    environment.  The information should have some relevance to 
    other Linux distributions, but may not be very helpful with
    respect to Windows or Mac OS environments.
  </p>

  <h2><a name="static">mplib as a static library</a></h2>
  <p>
    It is straightforward to obtain the 
    MetaPost compiler program <code>mpost</code> as part of TeX Live
    (on Ubuntu, this comes as part of the <code>texlive-binaries</code>
    package), but the TeX Live distribution does not contain the
    <code>mplib</code> library.
  </p>
  <!-- https://packages.debian.org/sid/all/texlive-binaries/filelist -->
  <p>
    Fortunately, it is also straightforward to obtain and build the TeX Live 
    source code (https://www.tug.org/texlive/) and, even better, 
    we can 
    <a href="https://www.tug.org/metapost.html">just get the source code relating to MetaPost</a> and build that
    (<a href="https://serveur-svn.lri.fr/svn/modhel/metapost/">https://serveur-svn.lri.fr/svn/modhel/metapost</a>; user/pw = anonsvn/anonsvn).
  </p>
  <p>
    Building MetaPost simply 
    involves a subversion checkout of the MetaPost source files
    followed by a call to the shell script <code>build.sh</code>
    that is included in the root directory of the MetaPost source code.
  </p>
  <p>
    The Dockerfile below builds a Docker container 
    (<a href="#Merkel:2014:DLL:2600239.2600241"/>)
    based on Ubuntu 16.04 with
    (the development version of) MetaPost downloaded and built in 
    <code>/opt/MetaPost/trunk</code>.
  </p>
  <rcode echo="FALSE">
cat(readLines("MetaPost-static/Dockerfile"), 
    sep="\n")
  </rcode>
  <p>
    In order to compile a new C program against this <code>mplib</code>
    build, we need the location of the <code>mplib.h</code> header file
    and we need the correct set of libraries to link against.
  </p>
  <p>
    The header file is easy enough to find ...
  </p>
  <rcode echo="FALSE">
dockerrun <- function(container, cmd) {
    cat(system(cmd, intern=TRUE),
        sep="\n")
}
  </rcode>
  <rcode echo="FALSE">
cmd <- "find /opt/MetaPost/trunk -name mplib.h"
cat(cmd)
dockerrun("mplib-static", cmd)
  </rcode>
  <p>
    We can also see that the build generated several static <code>mplib</code> 
    library files ... 
  </p>
  <rcode echo="FALSE">
cmd <- "find /opt/MetaPost/trunk/build/texk/web2c -name *libmp*.a"
cat(cmd)
dockerrun("mplib-static", cmd)
  </rcode>
  <p>
    In addition, the build generates a number of other libraries
    that the <code>mplib</code> library depends on.  
  </p>
  <rcode echo="FALSE">
cmd <- "ls /opt/MetaPost/trunk/build/libs/*/*.a"
cat(cmd)
dockerrun("mplib-static", cmd)
  </rcode>
  <p>
    These can be used to statically
    link <code>mplib</code> as part of a new program.
    The following code compiles an executable from <code>infinity.c</code>
    (shown <a href="#inf.c">earlier in this report</a>),
    using the static <code>mplib</code> library files ...
  </p>
  <rcode echo="FALSE">
cmd <- "gcc -c -I/opt/MetaPost/trunk/build/texk/web2c/ -o infinity-static.o infinity.c"
cat(cmd)    
dockerrun("mplib-static", cmd)
  </rcode>
  <rcode echo="FALSE">
cmd <- paste("gcc -o infinity-static infinity-static.o",
             "-L/opt/MetaPost/trunk/build/texk/web2c",
             "-lmplibcore -lmplibbackends -lmputil -lmplibextramath",
             "-L/opt/MetaPost/trunk/build/libs/libpng -lpng",
             "-L/opt/MetaPost/trunk/build/libs/cairo -lcairo",
             "-L/opt/MetaPost/trunk/build/libs/pixman -lpixman",
             "-L/opt/MetaPost/trunk/build/libs/mpfr -lmpfr",
             "-L/opt/MetaPost/trunk/build/libs/gmp -lgmp",
             "-L/opt/MetaPost/trunk/build/libs/zlib -lz",
             "-L/opt/MetaPost/trunk/build/texk/kpathsea/.libs -lkpathsea",
             "-lm")
cat(gsub(" (/|-L)", "\n    \\1", cmd))
dockerrun("mplib-static", cmd)
  </rcode>
  <p>
    This produces an executable file, <code>infinity-static</code>,
    and when we run this program, the result is the solved MetaPost path
    for the infinity symbol curve.
    This path should correspond to the result that we saw 
    earlier in the <a href="#solvedpath">log file that was generated
    by <code>mpost</code></a>.
  </p>
  <rcode echo="FALSE">
cmd <- "./infinity-static"
cat(cmd)    
dockerrun("mplib-static", cmd)
  </rcode>

  <h2><a name="shared">mplib as a shared library</a></h2>
  <p>
    Building a shared library version of <code>mplib</code> is very similar
    to the static build.  The only difficulty is that the <code>build.sh</code>
    script only generates statically linked libraries
    (see the
    <a href="https://serveur-svn.lri.fr/svn/modhel/metapost/trunk/INSTALL">INSTALL file</a>; 
    user/pw = anonsvn/anonsvn).
    However, if we specify <code>CFLAGS=-fpic</code>
    before calling the <code>build.sh</code> script, the build produces
    object files that can be used to create a shared library.
  </p>
  <!-- "For now, the executable still contains a statically linked libmplib." 
  -->
  <p>
    Another difference is that we build <code>libmplib.so</code> using
    the <code>mplib</code> object
    files (<code>.o</code> files rather than <code>.a</code> files)
    so that they are part of the shared library itself.
  </p>
  <rcode echo="FALSE">
cmd <- "find /opt/MetaPost/trunk/build/texk/web2c -name libmp*.o"
cat(cmd)
dockerrun("mplib-static", cmd)
  </rcode>
  <p>
    The Dockerfile below shows these minor changes.  It also takes
    further steps, 
    installing the shared library <code>libmplib.so</code>
    in <code>/usr/lib</code>, and installing the
    <code>mplib.h</code> header file in <code>/usr/include</code>.
  </p>
  <rcode echo="FALSE">
cat(readLines("MetaPost-shared/Dockerfile"), 
    sep="\n")
  </rcode>
  <p>
    With this set up, building our test program is as simple as the 
    following ...
  </p>
  <rcode echo="FALSE">
cmd <- "gcc -c -fpic -o infinity-shared.o infinity.c"
cat(cmd)    
dockerrun("mplib-shared", cmd)
cmd <- "gcc -o infinity-shared infinity-shared.o -lmplib"
cat(cmd)    
dockerrun("mplib-shared", cmd)
  </rcode>
  <rcode echo="FALSE">
cmd <- "./infinity-shared"
cat(cmd)    
dockerrun("mplib-shared", cmd)
  </rcode>

  <h2>Building from TeX Live source</h2>
  <p>
    A similar approach can be used to build MetaPost libraries
    from a full set of TeX Live source code (rather than just the
    MetaPost subset).  One difference is that the build script
    is called <code>Build</code> instead of <code>build.sh</code>,
    and another is that the build files are generated within a 
    directory called <code>Work</code> instead of a directory
    called <code>build</code>,
    but otherwise the process is very similar.
    An obvious disadvantage to using the complete TeX Live source
    is that the download is much larger and the build is longer and
    produces more files.  However, a complete TeX Live build may
    be useful for supporting a wider range of MetaPost images
    (e.g., MetaPost images that include TeX-formatted text labels).
  </p>

  <h2><a name="summary">Summary</a></h2>
  <p>
    This report describes a series of steps that can be used to build
    a shared library for MetaPost.  This makes it possible to
    write a new program that can make use of the powerful curve description
    facilities of MetaPost.
    The series of steps is provided in code form as a Dockerfile
    so that a Docker container that contains the MetaPost shared library
    can be generated easily.
  </p>

  <h2><a name="requirements">Technical requirements</a></h2>
  <p>
    The examples and discussion in this document relate to
    the <a href="https://serveur-svn.lri.fr/svn/modhel/metapost">subversion 
    archive</a> of the development version of the MetaPost
    source code, plus a Dockerfile that describes the construction of a 
    <a href="MetaPost-static/Dockerfile">static MetaPost
    library</a> and a Dockerfile that describes the construction of a 
    <a href="MetaPost-shared/Dockerfile">shared MetaPost
    library</a>.
  </p>
  <p>
    This report was generated within a Docker container
    (see <a href="#Resources">Resources</a> section below).
  </p>

  <h2><a name="Resources">Resources</a></h2>
  <ul>
    <li>
      The <a href="mplib-library.cml">raw source file</a> for this
      report, a <a href="mplib-library.xml">valid XML</a>
      transformation of the source file, a <a
      href="mplib-library.Rhtml">'knitr' document</a> generated from
      the XML file, 
      two <a href="toc.R">R</a> <a href="bib.R">files</a> and
      the <a href="mplib-library.bib">bibtex file</a>
      that are used to generate the table of contents and reference sections,
      two <a href="common.xsl">XSL</a> <a
      href="knitr.xsl">files</a> and an 
      <a href="knit.R">R file</a> that are used to transform the XML to
      the 'knitr' document, and a <a href="Makefile">Makefile</a> that
      contains code for the other transformations and coordinates
      everything.  
      These materials are also available
      on <a href="https://github.com/pmur002/mplib-library-report/releases/tag/v1">github</a>.
    </li>
    <li>
      <a href="grImportOLD_0.9-1t.tar.gz">Version 0.9-1</a>
      of 'grImport' packaged as 'grImportOLD'.
    </li>
    <li>
      This report was generated within a 
      <a href="https://www.docker.com/">Docker</a> container.
      The Docker command to build the report is included in the Makefile above.
      The Docker image for the container is available from
      <a href="https://hub.docker.com/r/pmur002/mplib-library/">Docker Hub</a>;
      alternatively, the image can be rebuilt from its 
      <a href="Dockerfile">Dockerfile</a>.
    </li>
    <li>
      The Docker image for the 
      <a href="https://hub.docker.com/r/pmur002/mplib-static/">static MetaPost
      library</a>.
    </li>
    <li>
      The Docker image for the 
      <a href="https://hub.docker.com/r/pmur002/mplib-shared/">shared MetaPost
      library</a>.
    </li>
  </ul>

  <h2>How to cite this document</h2>
  <p>
    Murrell, P. (2018). "Building an mplib Shared Library" 
    Technical Report 2018-10, Department of Statistics, The University of Auckland. 
    [ <a href="how-to-cite.bib">bib</a> ] 
  </p>

  <h2><a name="references">References</a></h2>
  <!--
    See http://ftp.math.utah.edu/pub/tex/bib/tugboat.html for 
    bibtex refs for TUGBoat articles on MetaPost.
  -->
  <ul style="list-style-type: none">
    <li>
      <a name="mplibapi"/>
    </li>
    <li>
      <a name="Hoekwater:TB28-3-317"/>
    </li>
    <li>
      <a name="Hoekwater:TB27-1-18"/>
    </li>
    <li>
      <a name="Hoekwater:TB29-3-380"/>
    </li>
    <li>
      <a name="metapost-hobby"/>
    </li>
    <li>
      <a name="metapost"/>
    </li>
    <li>
      <a name="Ierusalimschy:1996:LEE:229593.229595"/>
    </li>
    <li>
      <a name="luatex"/>
    </li>
    <li>
      <a name="Merkel:2014:DLL:2600239.2600241"/>
    </li>
  </ul>

  <hr/>
  <p>
    <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/"><img class="CC"
    alt="Creative Commons License" style="border-width:0"
    src="https://i.creativecommons.org/l/by/4.0/88x31.png"/></a><br/><span
    xmlns:dct="http://purl.org/dc/terms/"
    property="dct:title">This document</span>
    by <span xmlns:cc="http://creativecommons.org/ns#"
    property="cc:attributionName">Paul
    Murrell</span> is licensed under a <a rel="license"
    href="http://creativecommons.org/licenses/by/4.0/">Creative
    Commons Attribution 4.0 International License</a>.
  </p>

  <script><![CDATA[
  // Use async/await so that PDF files loaded one at a time
  async function loadPDFs() {
    var pdfcanvas = document.querySelectorAll("canvas.pdf");
    var i;
    for (i=0; i < pdfcanvas.length; i++) {
        var canvas = pdfcanvas[i];
        var canvasid = canvas.id;
        var pdf = await pdfjsLib.getDocument(canvasid + '.pdf');
        var page = await pdf.getPage(1);
        var scale = canvas.getAttribute("scale");
        if (!scale) {
            scale = 100/72;
        }
        var viewport = page.getViewport(scale);
        var context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        var renderContext = {
            canvasContext: context,
            viewport: viewport
        };
        page.render(renderContext);
    }
  }
  loadPDFs();
  ]]>
  </script>

</body>
</html>
